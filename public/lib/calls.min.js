let isUserMuted=!1,userPeers=[],peersRef=[];dropdown(document.querySelector(".calls.has-dropdown"),".calls");let localStream,joinBtn=document.querySelector(".join-call"),activeAudios=document.querySelector(".calls .audios"),prependElement=(e,t)=>{e.insertBefore(t,e.firstChild)},createUserAudio=(e,t=!1)=>{let o=document.createElement("audio");return o.autoplay=!0,o.muted=t,o.id=`${e}-audio`,prependElement(activeAudios,o),document.getElementById(`${e}-audio`)};joinBtn.addEventListener("click",()=>{if(-1===userJoined&&(-1===window.location.href.indexOf("name=")?window.location.href+=`&name=${current.user.userName}${autoJoin?"":"&autoJoin=true"}`:window.location.href+=`${autoJoin?"":"&autoJoin=true"}`),userJoined)leaveAudioRoom();else{let e=createUserAudio(current.user.id,!0);joinAudioRoom(e)}});let micChange=!1;navigator.mediaDevices.addEventListener("devicechange",async()=>{!userJoined||micChange||confirm("Looks like your default microphone changed, you'll need to re-join the call to use the new microphone. Would you like to do that now?")&&(userJoined=-1,micChange=!0,joinBtn.click())});let joinAudioRoom=e=>{navigator.mediaDevices.getUserMedia({video:!1,audio:!0}).then(async t=>{userJoined=!0,e.srcObject=localStream,document.querySelector(".calls .info").innerText=`Using microphone: ${t.getTracks()[0].label}`,localStream=t,joinBtn.innerText="Leave Call",document.querySelector(".calls .mute-call").style.display="block",socket.emit("joinAudio"),socket.on("loadExistingAudios",e=>{const t=[];(e=(e=e.filter(e=>e.id!==socket.id&&e.inAudio)).map(e=>e.id)).forEach(e=>{const o=createPeer(e,socket.id,localStream);peersRef.push({peerID:e,peer:o}),t.push({id:e,peer:o})}),loadParticipants(t),userPeers=t,socket.off("loadExistingAudios")})}).catch(e=>{alert(`${e.message} - couldn't connect to your microphone. Make sure you have allowed the game to use your microphone on your browser!`)})},leaveAudioRoom=()=>{document.querySelector(".calls .mute-call").style.display="none",userJoined=-1,joinBtn.innerText="Join Call",document.querySelector(".calls .info").innerText=`Using microphone: ${localStream.getTracks()[0].label} - click the button below to join!`,1===document.querySelector(".calls .audios").children.length&&(document.querySelector(".calls .warn").innerText="Looks like you are the only one here! You can join the call now, and others can join you whenever they want.",document.querySelector(".calls .block-title").style.display="none",document.querySelector(".calls .warn").style.display="block",document.querySelector(".calls .users").innerHTML=""),activeAudios.innerHTML="",localStream.getTracks()[0].stop();let e=document.getElementById(`u${current.user.id}-audio`);e&&e.remove();let t=document.querySelector(".calls p").innerText.match(/\d/g)[0];usersInCall.innerText=`(${t-1})`,socket.emit("leaveAudio")};socket.on("userJoinedAudio",e=>{if(peersRef.find(t=>t.peerID===e.callerID))return;playAudio(["sounds/notif.mp3"]).play().volume(.3);const t=addPeer(e.signal,e.callerID,localStream);peersRef.push({peerID:e.callerID,peer:t}),userPeers=[...userPeers,t];let o=createUserAudio(e.callerID);addParticipant(t,o)}),socket.on("rcvSig",e=>{peersRef.find(t=>t.peerID===e.id).peer.p.signal(e.signal)});let loadParticipants=e=>{for(let t=0;t<e.length;t++){let o=createUserAudio(e[t].id);addParticipant(e[t].peer,o)}},addParticipant=(e,t)=>{document.querySelector(".calls .info").innerText=`Using microphone: ${localStream.getTracks()[0].label} - connecting...`,e.p.on("stream",e=>{document.querySelector(".calls .info").innerText=`Using microphone: ${localStream.getTracks()[0].label} - connected!`,t.srcObject=e}),prependElement(activeAudios,t)},createPeer=(e,t,o)=>{const r={id:t,p:new SimplePeer({initiator:!0,trickle:!1,stream:o})};return r.p.on("signal",o=>{socket.emit("sendSig",{userToSignal:e,callerID:t,signal:o})}),r},addPeer=(e,t,o)=>{const r={id:t,p:new SimplePeer({initiator:!1,trickle:!1,stream:o})};return r.p.on("signal",e=>{socket.emit("returnSig",{signal:e,callerID:t})}),r.p.signal(e),r},userMute=document.querySelector(".calls .mute-call");if(userMute.addEventListener("click",e=>{isUserMuted?(isUserMuted=!1,userMute.innerText="Mute",localStream.getTracks()[0].enabled=!0,socket.emit("setMute",!1)):(isUserMuted=!0,userMute.innerText="Unmute",localStream.getTracks()[0].enabled=!1,socket.emit("setMute",!0))}),socket.on("updateParticipantMute",e=>{let{uid:t,status:o}=e,r=document.getElementById(`u${t}-audio`),n=document.getElementById(`${t}-audio`),i=document.querySelector(`.calls .users .silence[data-user='${t}']`);return r&&o?(r.classList.add("muted"),void(n&&t!==current.user.id&&(n.muted=!0))):r&&!o?(r.classList.remove("muted"),void(n&&t!==current.user.id&&"false"===i.getAttribute("muted")&&(n.muted=!1))):void 0}),socket.on("participantLeft",e=>{let{usersStillInRoom:t,uid:o}=e,r=document.getElementById(`u${o}-audio`),n=document.getElementById(`${o}-audio`);r&&r.remove(),n&&n.remove();let i=peersRef.findIndex(e=>e.peerID===o);-1!==i&&peersRef.splice(i,1);let l=userPeers.findIndex(e=>e.id===o);-1!==l&&userPeers.splice(l,1),usersInCall.innerText=` (${t})`}),autoJoin){let e=createUserAudio(current.user.id,!0);joinAudioRoom(e)}document.querySelector(".calls .users").addEventListener("click",e=>{if(e.target.classList.contains("silence")){let t=e.target.getAttribute("data-user"),o=document.getElementById(`${t}-audio`);"true"===e.target.getAttribute("muted")?(o.muted=!1,e.target.setAttribute("muted",!1)):(o.muted=!0,e.target.setAttribute("muted",!0))}});